package Management;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.util.Log;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**
 * Created by Stef on 23/03/2015.
 */

/*
 * Classe principale g√©rant l'algorithme du Jeu Akinator
 */
public class Algorithm {

	private Context context;

	public Algorithm(Context context) {
		this.context = context;
		this.jsonOdm = new JsonOdm(this.context);
	}

	/*
	 * Liste des personnages √©cart√©s , qui ne correspondent pas √† la r√©ponse
	 * √† une question pos√©e
	 */
	private static ArrayList<Integer> listPersosSuppressed;
	/*
	 * Liste des questions d√©j√† pos√©es dans une partie
	 */
	private static ArrayList<String> listQuestionsSuppressed;

	/*
	 * Liste des scores pour les personnages 
	 * String La clÈ du personnage dans
	 * le JSON 
	 * Integer le score de ce personnage
	 */
	private static HashMap<String, Integer> scoresByPerso;
	/*
	 * Instance de la classe g√©rant les JSON
	 */
	private static JsonOdm jsonOdm;

	/*
	 * Seuil minimum √† atteindre pour proposer une r√©ponse au joueur
	 */
	private final int MINIMUM_THRESOLD = 80;

	/*
	 * Permet d'obtenir la question la plus pertinente, la prochaine √† poser
	 * 
	 * @return question String La question sous forme de chaine
	 */
	public String getTheMostPertinenteQuestion() throws JSONException {

		String question = "";
		JSONArray characters = jsonOdm.getSingleton().getJsonPersonnages();
		JSONArray jsonQuestions = jsonOdm.getSingleton().getJsonQuestions();
		JSONObject questions = jsonQuestions.getJSONObject(0);
		Log.i("QUESTIONS ", questions.toString());
		// ArrayList<HashMap<String,Integer>> listResponsesByQuestion =new
		// ArrayList<HashMap<String, Integer>>();
		// HashMap<String,Integer> nbPersoByQuestion = new HashMap<String,
		// Integer>();

		Iterator keys = questions.keys();
		int curentScore = 0;
		String keyForQuestionToRetreive = "";
		while (keys.hasNext()) {
			String questionKey = (String) keys.next();
			JSONArray persosWhereOui = jsonOdm.findCharactersByQuestionKey(
					questionKey, "oui");
			JSONArray persosWhereNon = jsonOdm.findCharactersByQuestionKey(
					questionKey, "non");
			JSONArray persosWhereInconnu = jsonOdm.findCharactersByQuestionKey(
					questionKey, "inconnu");

			int nbOui = persosWhereOui.length();
			int nbNon = persosWhereNon.length();
			int nbInconnu = persosWhereInconnu.length();
			
			int scoreCalculated	= (nbOui + 1) * (nbNon + 1) * (nbInconnu + 1);
			if(curentScore < scoreCalculated){
				curentScore = scoreCalculated;
				keyForQuestionToRetreive = questionKey;
			}
					
		}
		//Get question string by question key
		question= jsonOdm.getQuestion(keyForQuestionToRetreive);
		Log.i("MOST PERTINENT QUESTION SCORE : ",String.valueOf(curentScore));
		Log.i("MOST PERTINENT QUESTION : ",question);
		return keyForQuestionToRetreive+";"+question;
	}
	/**
	 * 
	 * @param questionKey
	 * @param response
	 * @throws JSONException 
	 */
	public void calculateScoreForCharacters(String questionKey,String response) throws JSONException
	{
		JSONArray characters = jsonOdm.getSingleton().getJsonPersonnages();
		JSONArray jsonQuestions = jsonOdm.getSingleton().getJsonQuestions();
		
		for(int i=0;i<characters.length();++i){
			int scorePerso=0;
			JSONObject perso= characters.getJSONObject(i);
			
			for(int j=0;j<jsonQuestions.length();++j){
				
			}
		}
	}
	/*
	 * Permet de rajouter un personnage dans le JSON des personnages
	 * 
	 * @return void
	 */
	public static void addNewPerso(HashMap<String, String> caracteristiques)
			throws IOException {

		JSONObject newCharacter = new JSONObject(caracteristiques);
		jsonOdm.insertCharacter(newCharacter);
	}

	/*
	 * Permet de rajouter un personnage dans la liste des persos supprim√©s
	 * 
	 * @parama index int L'index du personnage dans le JSON
	 */
	public static void addPersosSuppressed(int index) {
		listPersosSuppressed.add(index);
	}

	/*
	 * Permet de rajouter une question dans la liste des questions supprim√©es
	 * 
	 * @param key String La cl√© correspondant √† la question dans le JSON
	 */
	public static void addQuestionSuppressed(String key) {
		listQuestionsSuppressed.add(key);
	}

	/*
	 * Permet de r√©cup√©rer la liste des personnages supprim√©s
	 * 
	 * @return ArrayList<Integer>
	 */
	public static ArrayList<Integer> getPersosSuppressed() {
		return listPersosSuppressed;
	}

	/*
	 * Permet de r√©cup√©rer la liste des questions d√©j√† pos√©es
	 * 
	 * @return ArrayList<String>
	 */
	public static ArrayList<String> getQuestionsSuppressed() {
		return listQuestionsSuppressed;
	}

	/*
	 * Permet d'obtnenir le nombre de personnages √©cart√©s
	 * 
	 * @return int Le nombre de personnages supprim√©s
	 */
	public static int countPersosSuppressed() {
		return listPersosSuppressed.size();
	}

	/*
	 * Permet de r√©initialiser la liste des personnages √©cart√©s
	 */
	public static void clearPersosSuppressed() {
		listPersosSuppressed.clear();
	}

	/*
	 * Permet de r√©initialiser la liste des questions d√©j√† pos√©es
	 */
	public static void clearListQuestions() {
		listQuestionsSuppressed.clear();
	}

	/*
	 * Permet de connaitre le nombre de personnages restant,
	 * 
	 * qui ne sont pas encore √©cart√©s
	 */
	public static int getNbCharactersLeft() {
		return jsonOdm.getSingleton().getJsonPersonnages().length()
				- listPersosSuppressed.size();

	}

	/*
	 * Permet d'obtenir le score maximum obtenu par une question
	 * 
	 * @return int Le score maximum
	 */
	public static int getMaxScore() {

		ArrayList<Integer> scores = new ArrayList<Integer>();

		/*for (HashMap<String, Integer> hashMap : scoresByPerso) {

			for (Map.Entry<String, Integer> entry : hashMap.entrySet()) {
				scores.add(entry.getValue());
			}

		}*/

		return Collections.max(scores);

	}
}
